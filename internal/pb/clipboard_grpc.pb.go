// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: api/clipboard.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClipboardService_SaveClipboardItem_FullMethodName   = "/clipboard.ClipboardService/SaveClipboardItem"
	ClipboardService_GetClipboardHistory_FullMethodName = "/clipboard.ClipboardService/GetClipboardHistory"
)

// ClipboardServiceClient is the client API for ClipboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClipboardServiceClient interface {
	// Sends a new clipboard item to be saved.
	SaveClipboardItem(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error)
	// Retrieves the clipboard history.
	GetClipboardHistory(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type clipboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClipboardServiceClient(cc grpc.ClientConnInterface) ClipboardServiceClient {
	return &clipboardServiceClient{cc}
}

func (c *clipboardServiceClient) SaveClipboardItem(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error) {
	out := new(SaveReply)
	err := c.cc.Invoke(ctx, ClipboardService_SaveClipboardItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipboardServiceClient) GetClipboardHistory(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, ClipboardService_GetClipboardHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClipboardServiceServer is the server API for ClipboardService service.
// All implementations must embed UnimplementedClipboardServiceServer
// for forward compatibility
type ClipboardServiceServer interface {
	// Sends a new clipboard item to be saved.
	SaveClipboardItem(context.Context, *SaveRequest) (*SaveReply, error)
	// Retrieves the clipboard history.
	GetClipboardHistory(context.Context, *GetRequest) (*GetReply, error)
	mustEmbedUnimplementedClipboardServiceServer()
}

// UnimplementedClipboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClipboardServiceServer struct {
}

func (UnimplementedClipboardServiceServer) SaveClipboardItem(context.Context, *SaveRequest) (*SaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveClipboardItem not implemented")
}
func (UnimplementedClipboardServiceServer) GetClipboardHistory(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClipboardHistory not implemented")
}
func (UnimplementedClipboardServiceServer) mustEmbedUnimplementedClipboardServiceServer() {}

// UnsafeClipboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClipboardServiceServer will
// result in compilation errors.
type UnsafeClipboardServiceServer interface {
	mustEmbedUnimplementedClipboardServiceServer()
}

func RegisterClipboardServiceServer(s grpc.ServiceRegistrar, srv ClipboardServiceServer) {
	s.RegisterService(&ClipboardService_ServiceDesc, srv)
}

func _ClipboardService_SaveClipboardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardServiceServer).SaveClipboardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClipboardService_SaveClipboardItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardServiceServer).SaveClipboardItem(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClipboardService_GetClipboardHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardServiceServer).GetClipboardHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClipboardService_GetClipboardHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardServiceServer).GetClipboardHistory(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClipboardService_ServiceDesc is the grpc.ServiceDesc for ClipboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClipboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clipboard.ClipboardService",
	HandlerType: (*ClipboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveClipboardItem",
			Handler:    _ClipboardService_SaveClipboardItem_Handler,
		},
		{
			MethodName: "GetClipboardHistory",
			Handler:    _ClipboardService_GetClipboardHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/clipboard.proto",
}
